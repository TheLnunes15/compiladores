/* This file was generated by SableCC (http://www.sablecc.org/). */

package calculadora.analysis;

import java.util.*;
import calculadora.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPPrograma().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAProgramaPrograma(AProgramaPrograma node)
    {
        defaultIn(node);
    }

    public void outAProgramaPrograma(AProgramaPrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgramaPrograma(AProgramaPrograma node)
    {
        inAProgramaPrograma(node);
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        {
            List<PDefClasse> copy = new ArrayList<PDefClasse>(node.getDir());
            for(PDefClasse e : copy)
            {
                e.apply(this);
            }
        }
        outAProgramaPrograma(node);
    }

    public void inARelacionamentosFamilia(ARelacionamentosFamilia node)
    {
        defaultIn(node);
    }

    public void outARelacionamentosFamilia(ARelacionamentosFamilia node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARelacionamentosFamilia(ARelacionamentosFamilia node)
    {
        inARelacionamentosFamilia(node);
        {
            List<PRelacionamento> copy = new ArrayList<PRelacionamento>(node.getRelacionamento());
            for(PRelacionamento e : copy)
            {
                e.apply(this);
            }
        }
        outARelacionamentosFamilia(node);
    }

    public void inARelacionamentoRelacionamento(ARelacionamentoRelacionamento node)
    {
        defaultIn(node);
    }

    public void outARelacionamentoRelacionamento(ARelacionamentoRelacionamento node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARelacionamentoRelacionamento(ARelacionamentoRelacionamento node)
    {
        inARelacionamentoRelacionamento(node);
        if(node.getFilha() != null)
        {
            node.getFilha().apply(this);
        }
        outARelacionamentoRelacionamento(node);
    }

    public void inAFilhaFilha(AFilhaFilha node)
    {
        defaultIn(node);
    }

    public void outAFilhaFilha(AFilhaFilha node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFilhaFilha(AFilhaFilha node)
    {
        inAFilhaFilha(node);
        if(node.getFilhaDaClasse() != null)
        {
            node.getFilhaDaClasse().apply(this);
        }
        if(node.getClIdentificador() != null)
        {
            node.getClIdentificador().apply(this);
        }
        outAFilhaFilha(node);
    }

    public void inADefClasseDefClasse(ADefClasseDefClasse node)
    {
        defaultIn(node);
    }

    public void outADefClasseDefClasse(ADefClasseDefClasse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefClasseDefClasse(ADefClasseDefClasse node)
    {
        inADefClasseDefClasse(node);
        {
            List<PDec> copy = new ArrayList<PDec>(node.getEsq());
            for(PDec e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PDeclara> copy = new ArrayList<PDeclara>(node.getDir());
            for(PDeclara e : copy)
            {
                e.apply(this);
            }
        }
        outADefClasseDefClasse(node);
    }

    public void inAIdentificadorIdentifica(AIdentificadorIdentifica node)
    {
        defaultIn(node);
    }

    public void outAIdentificadorIdentifica(AIdentificadorIdentifica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentificadorIdentifica(AIdentificadorIdentifica node)
    {
        inAIdentificadorIdentifica(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAIdentificadorIdentifica(node);
    }

    public void inAInitInicializar(AInitInicializar node)
    {
        defaultIn(node);
    }

    public void outAInitInicializar(AInitInicializar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInitInicializar(AInitInicializar node)
    {
        inAInitInicializar(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAInitInicializar(node);
    }

    public void inADeclaraObjDec(ADeclaraObjDec node)
    {
        defaultIn(node);
    }

    public void outADeclaraObjDec(ADeclaraObjDec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaraObjDec(ADeclaraObjDec node)
    {
        inADeclaraObjDec(node);
        {
            List<PIdentifica> copy = new ArrayList<PIdentifica>(node.getIdentifica());
            for(PIdentifica e : copy)
            {
                e.apply(this);
            }
        }
        outADeclaraObjDec(node);
    }

    public void inADeclaraVariavelDec(ADeclaraVariavelDec node)
    {
        defaultIn(node);
    }

    public void outADeclaraVariavelDec(ADeclaraVariavelDec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaraVariavelDec(ADeclaraVariavelDec node)
    {
        inADeclaraVariavelDec(node);
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        {
            List<PIdentifica> copy = new ArrayList<PIdentifica>(node.getDir());
            for(PIdentifica e : copy)
            {
                e.apply(this);
            }
        }
        outADeclaraVariavelDec(node);
    }

    public void inADeclaraConstanteDec(ADeclaraConstanteDec node)
    {
        defaultIn(node);
    }

    public void outADeclaraConstanteDec(ADeclaraConstanteDec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaraConstanteDec(ADeclaraConstanteDec node)
    {
        inADeclaraConstanteDec(node);
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        {
            List<PInicializar> copy = new ArrayList<PInicializar>(node.getDir());
            for(PInicializar e : copy)
            {
                e.apply(this);
            }
        }
        outADeclaraConstanteDec(node);
    }

    public void inADecProcedimentoDeclara(ADecProcedimentoDeclara node)
    {
        defaultIn(node);
    }

    public void outADecProcedimentoDeclara(ADecProcedimentoDeclara node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecProcedimentoDeclara(ADecProcedimentoDeclara node)
    {
        inADecProcedimentoDeclara(node);
        {
            List<PParametro> copy = new ArrayList<PParametro>(node.getEsq());
            for(PParametro e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        outADecProcedimentoDeclara(node);
    }

    public void inADecFuncaoDeclara(ADecFuncaoDeclara node)
    {
        defaultIn(node);
    }

    public void outADecFuncaoDeclara(ADecFuncaoDeclara node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecFuncaoDeclara(ADecFuncaoDeclara node)
    {
        inADecFuncaoDeclara(node);
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        {
            List<PParametro> copy = new ArrayList<PParametro>(node.getMid());
            for(PParametro e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        outADecFuncaoDeclara(node);
    }

    public void inAParametroParametro(AParametroParametro node)
    {
        defaultIn(node);
    }

    public void outAParametroParametro(AParametroParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametroParametro(AParametroParametro node)
    {
        inAParametroParametro(node);
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAParametroParametro(node);
    }

    public void inATipoClasseTipo(ATipoClasseTipo node)
    {
        defaultIn(node);
    }

    public void outATipoClasseTipo(ATipoClasseTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoClasseTipo(ATipoClasseTipo node)
    {
        inATipoClasseTipo(node);
        if(node.getTipoClasse() != null)
        {
            node.getTipoClasse().apply(this);
        }
        outATipoClasseTipo(node);
    }

    public void inATipoPrimtivoTipo(ATipoPrimtivoTipo node)
    {
        defaultIn(node);
    }

    public void outATipoPrimtivoTipo(ATipoPrimtivoTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoPrimtivoTipo(ATipoPrimtivoTipo node)
    {
        inATipoPrimtivoTipo(node);
        if(node.getTipoPrimitivo() != null)
        {
            node.getTipoPrimitivo().apply(this);
        }
        outATipoPrimtivoTipo(node);
    }

    public void inATipoClasseTipoClasse(ATipoClasseTipoClasse node)
    {
        defaultIn(node);
    }

    public void outATipoClasseTipoClasse(ATipoClasseTipoClasse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoClasseTipoClasse(ATipoClasseTipoClasse node)
    {
        inATipoClasseTipoClasse(node);
        if(node.getClIdentificador() != null)
        {
            node.getClIdentificador().apply(this);
        }
        outATipoClasseTipoClasse(node);
    }

    public void inAIntTipoPrimitivo(AIntTipoPrimitivo node)
    {
        defaultIn(node);
    }

    public void outAIntTipoPrimitivo(AIntTipoPrimitivo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntTipoPrimitivo(AIntTipoPrimitivo node)
    {
        inAIntTipoPrimitivo(node);
        if(node.getInteiro() != null)
        {
            node.getInteiro().apply(this);
        }
        outAIntTipoPrimitivo(node);
    }

    public void inABoolTipoPrimitivo(ABoolTipoPrimitivo node)
    {
        defaultIn(node);
    }

    public void outABoolTipoPrimitivo(ABoolTipoPrimitivo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolTipoPrimitivo(ABoolTipoPrimitivo node)
    {
        inABoolTipoPrimitivo(node);
        if(node.getBool() != null)
        {
            node.getBool().apply(this);
        }
        outABoolTipoPrimitivo(node);
    }

    public void inARealTipoPrimitivo(ARealTipoPrimitivo node)
    {
        defaultIn(node);
    }

    public void outARealTipoPrimitivo(ARealTipoPrimitivo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealTipoPrimitivo(ARealTipoPrimitivo node)
    {
        inARealTipoPrimitivo(node);
        if(node.getReal() != null)
        {
            node.getReal().apply(this);
        }
        outARealTipoPrimitivo(node);
    }

    public void inAInteiroNumero(AInteiroNumero node)
    {
        defaultIn(node);
    }

    public void outAInteiroNumero(AInteiroNumero node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInteiroNumero(AInteiroNumero node)
    {
        inAInteiroNumero(node);
        if(node.getNumInteiro() != null)
        {
            node.getNumInteiro().apply(this);
        }
        outAInteiroNumero(node);
    }

    public void inARealNumero(ARealNumero node)
    {
        defaultIn(node);
    }

    public void outARealNumero(ARealNumero node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealNumero(ARealNumero node)
    {
        inARealNumero(node);
        if(node.getNumReal() != null)
        {
            node.getNumReal().apply(this);
        }
        outARealNumero(node);
    }

    public void inAVerdadeiroBooleano(AVerdadeiroBooleano node)
    {
        defaultIn(node);
    }

    public void outAVerdadeiroBooleano(AVerdadeiroBooleano node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVerdadeiroBooleano(AVerdadeiroBooleano node)
    {
        inAVerdadeiroBooleano(node);
        if(node.getVerdadeiro() != null)
        {
            node.getVerdadeiro().apply(this);
        }
        outAVerdadeiroBooleano(node);
    }

    public void inAFalsoBooleano(AFalsoBooleano node)
    {
        defaultIn(node);
    }

    public void outAFalsoBooleano(AFalsoBooleano node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalsoBooleano(AFalsoBooleano node)
    {
        inAFalsoBooleano(node);
        if(node.getFalso() != null)
        {
            node.getFalso().apply(this);
        }
        outAFalsoBooleano(node);
    }

    public void inAAtributoAtributo(AAtributoAtributo node)
    {
        defaultIn(node);
    }

    public void outAAtributoAtributo(AAtributoAtributo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtributoAtributo(AAtributoAtributo node)
    {
        inAAtributoAtributo(node);
        {
            List<PExp> copy = new ArrayList<PExp>(node.getExp());
            for(PExp e : copy)
            {
                e.apply(this);
            }
        }
        outAAtributoAtributo(node);
    }

    public void inASeComando(ASeComando node)
    {
        defaultIn(node);
    }

    public void outASeComando(ASeComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeComando(ASeComando node)
    {
        inASeComando(node);
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        outASeComando(node);
    }

    public void inAComandoComando(AComandoComando node)
    {
        defaultIn(node);
    }

    public void outAComandoComando(AComandoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoComando(AComandoComando node)
    {
        inAComandoComando(node);
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        outAComandoComando(node);
    }

    public void inAComandoEnquantoComando(AComandoEnquantoComando node)
    {
        defaultIn(node);
    }

    public void outAComandoEnquantoComando(AComandoEnquantoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoEnquantoComando(AComandoEnquantoComando node)
    {
        inAComandoEnquantoComando(node);
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        outAComandoEnquantoComando(node);
    }

    public void inAComandoAtribComando(AComandoAtribComando node)
    {
        defaultIn(node);
    }

    public void outAComandoAtribComando(AComandoAtribComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoAtribComando(AComandoAtribComando node)
    {
        inAComandoAtribComando(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAComandoAtribComando(node);
    }

    public void inAAtributoComando(AAtributoComando node)
    {
        defaultIn(node);
    }

    public void outAAtributoComando(AAtributoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtributoComando(AAtributoComando node)
    {
        inAAtributoComando(node);
        if(node.getAtributo() != null)
        {
            node.getAtributo().apply(this);
        }
        outAAtributoComando(node);
    }

    public void inABlocoComando(ABlocoComando node)
    {
        defaultIn(node);
    }

    public void outABlocoComando(ABlocoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoComando(ABlocoComando node)
    {
        inABlocoComando(node);
        {
            List<PDec> copy = new ArrayList<PDec>(node.getEsq());
            for(PDec e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PComando> copy = new ArrayList<PComando>(node.getDir());
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        outABlocoComando(node);
    }

    public void inAObjectObject(AObjectObject node)
    {
        defaultIn(node);
    }

    public void outAObjectObject(AObjectObject node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAObjectObject(AObjectObject node)
    {
        inAObjectObject(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getPonto() != null)
        {
            node.getPonto().apply(this);
        }
        outAObjectObject(node);
    }

    public void inASeExp(ASeExp node)
    {
        defaultIn(node);
    }

    public void outASeExp(ASeExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeExp(ASeExp node)
    {
        inASeExp(node);
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        outASeExp(node);
    }

    public void inAEntaoExp(AEntaoExp node)
    {
        defaultIn(node);
    }

    public void outAEntaoExp(AEntaoExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEntaoExp(AEntaoExp node)
    {
        inAEntaoExp(node);
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        outAEntaoExp(node);
    }

    public void inASenaoExp(ASenaoExp node)
    {
        defaultIn(node);
    }

    public void outASenaoExp(ASenaoExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASenaoExp(ASenaoExp node)
    {
        inASenaoExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outASenaoExp(node);
    }

    public void inAEnquantoExpExp(AEnquantoExpExp node)
    {
        defaultIn(node);
    }

    public void outAEnquantoExpExp(AEnquantoExpExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnquantoExpExp(AEnquantoExpExp node)
    {
        inAEnquantoExpExp(node);
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        outAEnquantoExpExp(node);
    }

    public void inAMaisExp(AMaisExp node)
    {
        defaultIn(node);
    }

    public void outAMaisExp(AMaisExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaisExp(AMaisExp node)
    {
        inAMaisExp(node);
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        outAMaisExp(node);
    }

    public void inAMenosExp(AMenosExp node)
    {
        defaultIn(node);
    }

    public void outAMenosExp(AMenosExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenosExp(AMenosExp node)
    {
        inAMenosExp(node);
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        outAMenosExp(node);
    }

    public void inAMultExp(AMultExp node)
    {
        defaultIn(node);
    }

    public void outAMultExp(AMultExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultExp(AMultExp node)
    {
        inAMultExp(node);
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        outAMultExp(node);
    }

    public void inADivExp(ADivExp node)
    {
        defaultIn(node);
    }

    public void outADivExp(ADivExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivExp(ADivExp node)
    {
        inADivExp(node);
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        outADivExp(node);
    }

    public void inAModExp(AModExp node)
    {
        defaultIn(node);
    }

    public void outAModExp(AModExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModExp(AModExp node)
    {
        inAModExp(node);
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        outAModExp(node);
    }

    public void inACompExp(ACompExp node)
    {
        defaultIn(node);
    }

    public void outACompExp(ACompExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACompExp(ACompExp node)
    {
        inACompExp(node);
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        outACompExp(node);
    }

    public void inAMenorExp(AMenorExp node)
    {
        defaultIn(node);
    }

    public void outAMenorExp(AMenorExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorExp(AMenorExp node)
    {
        inAMenorExp(node);
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        outAMenorExp(node);
    }

    public void inABlocoDelimitExp(ABlocoDelimitExp node)
    {
        defaultIn(node);
    }

    public void outABlocoDelimitExp(ABlocoDelimitExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoDelimitExp(ABlocoDelimitExp node)
    {
        inABlocoDelimitExp(node);
        {
            List<PDec> copy = new ArrayList<PDec>(node.getEsq());
            for(PDec e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        outABlocoDelimitExp(node);
    }

    public void inANumNegativoExp(ANumNegativoExp node)
    {
        defaultIn(node);
    }

    public void outANumNegativoExp(ANumNegativoExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumNegativoExp(ANumNegativoExp node)
    {
        inANumNegativoExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outANumNegativoExp(node);
    }

    public void inAAndExp(AAndExp node)
    {
        defaultIn(node);
    }

    public void outAAndExp(AAndExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndExp(AAndExp node)
    {
        inAAndExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAAndExp(node);
    }

    public void inAOrExp(AOrExp node)
    {
        defaultIn(node);
    }

    public void outAOrExp(AOrExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrExp(AOrExp node)
    {
        inAOrExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAOrExp(node);
    }

    public void inAIdAtribExp(AIdAtribExp node)
    {
        defaultIn(node);
    }

    public void outAIdAtribExp(AIdAtribExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdAtribExp(AIdAtribExp node)
    {
        inAIdAtribExp(node);
        if(node.getObject() != null)
        {
            node.getObject().apply(this);
        }
        outAIdAtribExp(node);
    }

    public void inAIdAtributoExp(AIdAtributoExp node)
    {
        defaultIn(node);
    }

    public void outAIdAtributoExp(AIdAtributoExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdAtributoExp(AIdAtributoExp node)
    {
        inAIdAtributoExp(node);
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        outAIdAtributoExp(node);
    }

    public void inANumExp(ANumExp node)
    {
        defaultIn(node);
    }

    public void outANumExp(ANumExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumExp(ANumExp node)
    {
        inANumExp(node);
        if(node.getNumero() != null)
        {
            node.getNumero().apply(this);
        }
        outANumExp(node);
    }

    public void inANumBoolExp(ANumBoolExp node)
    {
        defaultIn(node);
    }

    public void outANumBoolExp(ANumBoolExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumBoolExp(ANumBoolExp node)
    {
        inANumBoolExp(node);
        if(node.getBooleano() != null)
        {
            node.getBooleano().apply(this);
        }
        outANumBoolExp(node);
    }
}
