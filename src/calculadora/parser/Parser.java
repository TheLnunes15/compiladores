/* This file was generated by SableCC (http://www.sablecc.org/). */

package calculadora.parser;

import calculadora.lexer.*;
import calculadora.node.*;
import calculadora.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PPrograma node1 = (PPrograma) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAprogram1Program */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce AAprogram2Program */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list);
            }
            break;
            case 2: /* reduce AClassesClasses */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list);
            }
            break;
            case 3: /* reduce AClasseClasses */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list);
            }
            break;
            case 4: /* reduce AFamiliaFamilia */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list);
            }
            break;
            case 5: /* reduce ARelacionamentosRelacionamentos */
            {
                ArrayList<Object> list = new5();
                push(goTo(3), list);
            }
            break;
            case 6: /* reduce ARelacionamentoRelacionamentos */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list);
            }
            break;
            case 7: /* reduce ARelacionamentoRelacionamento */
            {
                ArrayList<Object> list = new7();
                push(goTo(4), list);
            }
            break;
            case 8: /* reduce AFilhaFilha */
            {
                ArrayList<Object> list = new8();
                push(goTo(5), list);
            }
            break;
            case 9: /* reduce AAdefclassedefclasse1DefClasse */
            {
                ArrayList<Object> list = new9();
                push(goTo(6), list);
            }
            break;
            case 10: /* reduce AAdefclassedefclasse2DefClasse */
            {
                ArrayList<Object> list = new10();
                push(goTo(6), list);
            }
            break;
            case 11: /* reduce AAdefclassedefclasse3DefClasse */
            {
                ArrayList<Object> list = new11();
                push(goTo(6), list);
            }
            break;
            case 12: /* reduce AAdefclassedefclasse4DefClasse */
            {
                ArrayList<Object> list = new12();
                push(goTo(6), list);
            }
            break;
            case 13: /* reduce AAtributosAtributos */
            {
                ArrayList<Object> list = new13();
                push(goTo(7), list);
            }
            break;
            case 14: /* reduce ADecAtributos */
            {
                ArrayList<Object> list = new14();
                push(goTo(7), list);
            }
            break;
            case 15: /* reduce AMetodosMetodos */
            {
                ArrayList<Object> list = new15();
                push(goTo(8), list);
            }
            break;
            case 16: /* reduce ADecMetodos */
            {
                ArrayList<Object> list = new16();
                push(goTo(8), list);
            }
            break;
            case 17: /* reduce AObjDec */
            {
                ArrayList<Object> list = new17();
                push(goTo(9), list);
            }
            break;
            case 18: /* reduce AVarDec */
            {
                ArrayList<Object> list = new18();
                push(goTo(9), list);
            }
            break;
            case 19: /* reduce AConsDec */
            {
                ArrayList<Object> list = new19();
                push(goTo(9), list);
            }
            break;
            case 20: /* reduce ADecsDeclaracoes */
            {
                ArrayList<Object> list = new20();
                push(goTo(10), list);
            }
            break;
            case 21: /* reduce ADecDeclaracoes */
            {
                ArrayList<Object> list = new21();
                push(goTo(10), list);
            }
            break;
            case 22: /* reduce AConstantesConstantes */
            {
                ArrayList<Object> list = new22();
                push(goTo(11), list);
            }
            break;
            case 23: /* reduce ADecConsConstantes */
            {
                ArrayList<Object> list = new23();
                push(goTo(11), list);
            }
            break;
            case 24: /* reduce ADecObjDecObj */
            {
                ArrayList<Object> list = new24();
                push(goTo(12), list);
            }
            break;
            case 25: /* reduce ADecVarDecVar */
            {
                ArrayList<Object> list = new25();
                push(goTo(13), list);
            }
            break;
            case 26: /* reduce ADecConsDecCons */
            {
                ArrayList<Object> list = new26();
                push(goTo(14), list);
            }
            break;
            case 27: /* reduce AIdentificacoesIdentificacoes */
            {
                ArrayList<Object> list = new27();
                push(goTo(15), list);
            }
            break;
            case 28: /* reduce AIdIdentificacoes */
            {
                ArrayList<Object> list = new28();
                push(goTo(15), list);
            }
            break;
            case 29: /* reduce AInicializacoesInicializacoes */
            {
                ArrayList<Object> list = new29();
                push(goTo(16), list);
            }
            break;
            case 30: /* reduce AInicializacaoInicializacoes */
            {
                ArrayList<Object> list = new30();
                push(goTo(16), list);
            }
            break;
            case 31: /* reduce AIdentificadorIdentifica */
            {
                ArrayList<Object> list = new31();
                push(goTo(17), list);
            }
            break;
            case 32: /* reduce AInicializarInicializar */
            {
                ArrayList<Object> list = new32();
                push(goTo(18), list);
            }
            break;
            case 33: /* reduce AProcDeclara */
            {
                ArrayList<Object> list = new33();
                push(goTo(19), list);
            }
            break;
            case 34: /* reduce AFuncDeclara */
            {
                ArrayList<Object> list = new34();
                push(goTo(19), list);
            }
            break;
            case 35: /* reduce AAdecprocedimentodecprocedimento1DecProcedimento */
            {
                ArrayList<Object> list = new35();
                push(goTo(20), list);
            }
            break;
            case 36: /* reduce AAdecprocedimentodecprocedimento2DecProcedimento */
            {
                ArrayList<Object> list = new36();
                push(goTo(20), list);
            }
            break;
            case 37: /* reduce AAdecprocedimentodecprocedimento3DecProcedimento */
            {
                ArrayList<Object> list = new37();
                push(goTo(20), list);
            }
            break;
            case 38: /* reduce AAdecprocedimentodecprocedimento4DecProcedimento */
            {
                ArrayList<Object> list = new38();
                push(goTo(20), list);
            }
            break;
            case 39: /* reduce AAdecfuncaodecfuncao1DecFuncao */
            {
                ArrayList<Object> list = new39();
                push(goTo(21), list);
            }
            break;
            case 40: /* reduce AAdecfuncaodecfuncao2DecFuncao */
            {
                ArrayList<Object> list = new40();
                push(goTo(21), list);
            }
            break;
            case 41: /* reduce AAdecfuncaodecfuncao3DecFuncao */
            {
                ArrayList<Object> list = new41();
                push(goTo(21), list);
            }
            break;
            case 42: /* reduce AAdecfuncaodecfuncao4DecFuncao */
            {
                ArrayList<Object> list = new42();
                push(goTo(21), list);
            }
            break;
            case 43: /* reduce AParametrosParametros */
            {
                ArrayList<Object> list = new43();
                push(goTo(22), list);
            }
            break;
            case 44: /* reduce AParametroParametros */
            {
                ArrayList<Object> list = new44();
                push(goTo(22), list);
            }
            break;
            case 45: /* reduce AParametroParametro */
            {
                ArrayList<Object> list = new45();
                push(goTo(23), list);
            }
            break;
            case 46: /* reduce AClasseTipo */
            {
                ArrayList<Object> list = new46();
                push(goTo(24), list);
            }
            break;
            case 47: /* reduce APrimitivoTipo */
            {
                ArrayList<Object> list = new47();
                push(goTo(24), list);
            }
            break;
            case 48: /* reduce ATipoClasseTipoClasse */
            {
                ArrayList<Object> list = new48();
                push(goTo(25), list);
            }
            break;
            case 49: /* reduce AIntTipoPrimitivo */
            {
                ArrayList<Object> list = new49();
                push(goTo(26), list);
            }
            break;
            case 50: /* reduce ABoolTipoPrimitivo */
            {
                ArrayList<Object> list = new50();
                push(goTo(26), list);
            }
            break;
            case 51: /* reduce ARealTipoPrimitivo */
            {
                ArrayList<Object> list = new51();
                push(goTo(26), list);
            }
            break;
            case 52: /* reduce AComandoSeComando */
            {
                ArrayList<Object> list = new52();
                push(goTo(27), list);
            }
            break;
            case 53: /* reduce AComandoEnquantoComando */
            {
                ArrayList<Object> list = new53();
                push(goTo(27), list);
            }
            break;
            case 54: /* reduce AComandoAtribComando */
            {
                ArrayList<Object> list = new54();
                push(goTo(27), list);
            }
            break;
            case 55: /* reduce AAcomandoatributocomando1Comando */
            {
                ArrayList<Object> list = new55();
                push(goTo(27), list);
            }
            break;
            case 56: /* reduce AAcomandoatributocomando2Comando */
            {
                ArrayList<Object> list = new56();
                push(goTo(27), list);
            }
            break;
            case 57: /* reduce AComandoBlocoComando */
            {
                ArrayList<Object> list = new57();
                push(goTo(27), list);
            }
            break;
            case 58: /* reduce AComandosComandos */
            {
                ArrayList<Object> list = new58();
                push(goTo(28), list);
            }
            break;
            case 59: /* reduce AComandoComandos */
            {
                ArrayList<Object> list = new59();
                push(goTo(28), list);
            }
            break;
            case 60: /* reduce AAblocobloco1Bloco */
            {
                ArrayList<Object> list = new60();
                push(goTo(29), list);
            }
            break;
            case 61: /* reduce AAblocobloco2Bloco */
            {
                ArrayList<Object> list = new61();
                push(goTo(29), list);
            }
            break;
            case 62: /* reduce AAblocobloco3Bloco */
            {
                ArrayList<Object> list = new62();
                push(goTo(29), list);
            }
            break;
            case 63: /* reduce AAblocobloco4Bloco */
            {
                ArrayList<Object> list = new63();
                push(goTo(29), list);
            }
            break;
            case 64: /* reduce AComandoExp */
            {
                ArrayList<Object> list = new64();
                push(goTo(30), list);
            }
            break;
            case 65: /* reduce AEnquantoExpExp */
            {
                ArrayList<Object> list = new65();
                push(goTo(30), list);
            }
            break;
            case 66: /* reduce ANegativoExp */
            {
                ArrayList<Object> list = new66();
                push(goTo(30), list);
            }
            break;
            case 67: /* reduce ASomaExp */
            {
                ArrayList<Object> list = new67();
                push(goTo(30), list);
            }
            break;
            case 68: /* reduce ASubtracaoExp */
            {
                ArrayList<Object> list = new68();
                push(goTo(30), list);
            }
            break;
            case 69: /* reduce AMultExp */
            {
                ArrayList<Object> list = new69();
                push(goTo(30), list);
            }
            break;
            case 70: /* reduce ADivExp */
            {
                ArrayList<Object> list = new70();
                push(goTo(30), list);
            }
            break;
            case 71: /* reduce AModExp */
            {
                ArrayList<Object> list = new71();
                push(goTo(30), list);
            }
            break;
            case 72: /* reduce AComparacaoExp */
            {
                ArrayList<Object> list = new72();
                push(goTo(30), list);
            }
            break;
            case 73: /* reduce AMenorQueExp */
            {
                ArrayList<Object> list = new73();
                push(goTo(30), list);
            }
            break;
            case 74: /* reduce AAndExp */
            {
                ArrayList<Object> list = new74();
                push(goTo(30), list);
            }
            break;
            case 75: /* reduce AOrExp */
            {
                ArrayList<Object> list = new75();
                push(goTo(30), list);
            }
            break;
            case 76: /* reduce ABlocoDelimitExp */
            {
                ArrayList<Object> list = new76();
                push(goTo(30), list);
            }
            break;
            case 77: /* reduce ATermoExp */
            {
                ArrayList<Object> list = new77();
                push(goTo(30), list);
            }
            break;
            case 78: /* reduce AContCondEntaoParte */
            {
                ArrayList<Object> list = new78();
                push(goTo(31), list);
            }
            break;
            case 79: /* reduce AFimCondSenaoParte */
            {
                ArrayList<Object> list = new79();
                push(goTo(32), list);
            }
            break;
            case 80: /* reduce ANumeroTermo */
            {
                ArrayList<Object> list = new80();
                push(goTo(33), list);
            }
            break;
            case 81: /* reduce ABooleanoTermo */
            {
                ArrayList<Object> list = new81();
                push(goTo(33), list);
            }
            break;
            case 82: /* reduce AIdAtributoTermo */
            {
                ArrayList<Object> list = new82();
                push(goTo(33), list);
            }
            break;
            case 83: /* reduce AParTermo */
            {
                ArrayList<Object> list = new83();
                push(goTo(33), list);
            }
            break;
            case 84: /* reduce AInteiroNumero */
            {
                ArrayList<Object> list = new84();
                push(goTo(34), list);
            }
            break;
            case 85: /* reduce ARealNumero */
            {
                ArrayList<Object> list = new85();
                push(goTo(34), list);
            }
            break;
            case 86: /* reduce AVerdadeiroBooleano */
            {
                ArrayList<Object> list = new86();
                push(goTo(35), list);
            }
            break;
            case 87: /* reduce AFalsoBooleano */
            {
                ArrayList<Object> list = new87();
                push(goTo(35), list);
            }
            break;
            case 88: /* reduce AAidatribidatributo1IdAtributo */
            {
                ArrayList<Object> list = new88();
                push(goTo(36), list);
            }
            break;
            case 89: /* reduce AAidatribidatributo2IdAtributo */
            {
                ArrayList<Object> list = new89();
                push(goTo(36), list);
            }
            break;
            case 90: /* reduce AAidatributoidatributo1IdAtributo */
            {
                ArrayList<Object> list = new90();
                push(goTo(36), list);
            }
            break;
            case 91: /* reduce AAidatributoidatributo2IdAtributo */
            {
                ArrayList<Object> list = new91();
                push(goTo(36), list);
            }
            break;
            case 92: /* reduce AObjectObject */
            {
                ArrayList<Object> list = new92();
                push(goTo(37), list);
            }
            break;
            case 93: /* reduce AAblocodelimitblocodelimit1BlocoDelimit */
            {
                ArrayList<Object> list = new93();
                push(goTo(38), list);
            }
            break;
            case 94: /* reduce AAblocodelimitblocodelimit2BlocoDelimit */
            {
                ArrayList<Object> list = new94();
                push(goTo(38), list);
            }
            break;
            case 95: /* reduce AAatributoatributo1Atributo */
            {
                ArrayList<Object> list = new95();
                push(goTo(39), list);
            }
            break;
            case 96: /* reduce AAatributoatributo2Atributo */
            {
                ArrayList<Object> list = new96();
                push(goTo(39), list);
            }
            break;
            case 97: /* reduce AExpreExpre */
            {
                ArrayList<Object> list = new97();
                push(goTo(40), list);
            }
            break;
            case 98: /* reduce AExpExpre */
            {
                ArrayList<Object> list = new98();
                push(goTo(40), list);
            }
            break;
            case 99: /* reduce ATerminal$Inicializacoes */
            {
                ArrayList<Object> list = new99();
                push(goTo(41), list);
            }
            break;
            case 100: /* reduce ANonTerminal$Inicializacoes */
            {
                ArrayList<Object> list = new100();
                push(goTo(41), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAprogram1Program */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrograma pprogramaNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList1.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pprogramaNode1 = new AProgramaPrograma(null, listNode4);
        }
	nodeList.add(pprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAprogram2Program */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrograma pprogramaNode1;
        {
            // Block
        PFamilia pfamiliaNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pfamiliaNode2 = (PFamilia)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pprogramaNode1 = new AProgramaPrograma(pfamiliaNode2, listNode4);
        }
	nodeList.add(pprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AClassesClasses */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PDefClasse pdefclasseNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        pdefclasseNode1 = (PDefClasse)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(pdefclasseNode1 != null)
	{
	  listNode3.add(pdefclasseNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AClasseClasses */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PDefClasse pdefclasseNode1;
        pdefclasseNode1 = (PDefClasse)nodeArrayList1.get(0);
	if(pdefclasseNode1 != null)
	{
	  listNode2.add(pdefclasseNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AFamiliaFamilia */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFamilia pfamiliaNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pfamiliaNode1 = new ARelacionamentosFamilia(listNode3);
        }
	nodeList.add(pfamiliaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce ARelacionamentosRelacionamentos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PRelacionamento prelacionamentoNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        prelacionamentoNode1 = (PRelacionamento)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(prelacionamentoNode1 != null)
	{
	  listNode3.add(prelacionamentoNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce ARelacionamentoRelacionamentos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PRelacionamento prelacionamentoNode1;
        prelacionamentoNode1 = (PRelacionamento)nodeArrayList1.get(0);
	if(prelacionamentoNode1 != null)
	{
	  listNode2.add(prelacionamentoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce ARelacionamentoRelacionamento */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelacionamento prelacionamentoNode1;
        {
            // Block
        PFilha pfilhaNode2;
        pfilhaNode2 = (PFilha)nodeArrayList3.get(0);

        prelacionamentoNode1 = new ARelacionamentoRelacionamento(pfilhaNode2);
        }
	nodeList.add(prelacionamentoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AFilhaFilha */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFilha pfilhaNode1;
        {
            // Block
        TFilhaDaClasse tfilhadaclasseNode2;
        TClIdentificador tclidentificadorNode3;
        tfilhadaclasseNode2 = (TFilhaDaClasse)nodeArrayList1.get(0);
        tclidentificadorNode3 = (TClIdentificador)nodeArrayList2.get(0);

        pfilhaNode1 = new AFilhaFilha(tfilhadaclasseNode2, tclidentificadorNode3);
        }
	nodeList.add(pfilhaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AAdefclassedefclasse1DefClasse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDefClasse pdefclasseNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        }

        pdefclasseNode1 = new ADefClasseDefClasse(listNode2, listNode3);
        }
	nodeList.add(pdefclasseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AAdefclassedefclasse2DefClasse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDefClasse pdefclasseNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList4.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        }

        pdefclasseNode1 = new ADefClasseDefClasse(listNode3, listNode4);
        }
	nodeList.add(pdefclasseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AAdefclassedefclasse3DefClasse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDefClasse pdefclasseNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pdefclasseNode1 = new ADefClasseDefClasse(listNode2, listNode4);
        }
	nodeList.add(pdefclasseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AAdefclassedefclasse4DefClasse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDefClasse pdefclasseNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList4.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList5.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pdefclasseNode1 = new ADefClasseDefClasse(listNode3, listNode5);
        }
	nodeList.add(pdefclasseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AAtributosAtributos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PDec pdecNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        pdecNode1 = (PDec)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(pdecNode1 != null)
	{
	  listNode3.add(pdecNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce ADecAtributos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PDec pdecNode1;
        pdecNode1 = (PDec)nodeArrayList1.get(0);
	if(pdecNode1 != null)
	{
	  listNode2.add(pdecNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AMetodosMetodos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PDeclara pdeclaraNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        pdeclaraNode1 = (PDeclara)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(pdeclaraNode1 != null)
	{
	  listNode3.add(pdeclaraNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ADecMetodos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PDeclara pdeclaraNode1;
        pdeclaraNode1 = (PDeclara)nodeArrayList1.get(0);
	if(pdeclaraNode1 != null)
	{
	  listNode2.add(pdeclaraNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AObjDec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDec pdecNode1;
        pdecNode1 = (PDec)nodeArrayList1.get(0);
	nodeList.add(pdecNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AVarDec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDec pdecNode1;
        pdecNode1 = (PDec)nodeArrayList1.get(0);
	nodeList.add(pdecNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AConsDec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDec pdecNode1;
        pdecNode1 = (PDec)nodeArrayList1.get(0);
	nodeList.add(pdecNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce ADecsDeclaracoes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PDec pdecNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        pdecNode1 = (PDec)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(pdecNode1 != null)
	{
	  listNode3.add(pdecNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce ADecDeclaracoes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PDec pdecNode1;
        pdecNode1 = (PDec)nodeArrayList1.get(0);
	if(pdecNode1 != null)
	{
	  listNode2.add(pdecNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AConstantesConstantes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PDec pdecNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        pdecNode1 = (PDec)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(pdecNode1 != null)
	{
	  listNode3.add(pdecNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce ADecConsConstantes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PDec pdecNode1;
        pdecNode1 = (PDec)nodeArrayList1.get(0);
	if(pdecNode1 != null)
	{
	  listNode2.add(pdecNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce ADecObjDecObj */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDec pdecNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pdecNode1 = new ADeclaraObjDec(listNode3);
        }
	nodeList.add(pdecNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce ADecVarDecVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDec pdecNode1;
        {
            // Block
        PTipo ptipoNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        ptipoNode2 = (PTipo)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pdecNode1 = new ADeclaraVariavelDec(ptipoNode2, listNode4);
        }
	nodeList.add(pdecNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce ADecConsDecCons */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDec pdecNode1;
        {
            // Block
        PTipoPrimitivo ptipoprimitivoNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        ptipoprimitivoNode2 = (PTipoPrimitivo)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pdecNode1 = new ADeclaraConstanteDec(ptipoprimitivoNode2, listNode4);
        }
	nodeList.add(pdecNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AIdentificacoesIdentificacoes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PIdentifica pidentificaNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        pidentificaNode1 = (PIdentifica)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(pidentificaNode1 != null)
	{
	  listNode3.add(pidentificaNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AIdIdentificacoes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PIdentifica pidentificaNode1;
        pidentificaNode1 = (PIdentifica)nodeArrayList1.get(0);
	if(pidentificaNode1 != null)
	{
	  listNode2.add(pidentificaNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AInicializacoesInicializacoes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PInicializar pinicializarNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        pinicializarNode1 = (PInicializar)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(pinicializarNode1 != null)
	{
	  listNode3.add(pinicializarNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AInicializacaoInicializacoes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PInicializar pinicializarNode1;
        pinicializarNode1 = (PInicializar)nodeArrayList1.get(0);
	if(pinicializarNode1 != null)
	{
	  listNode2.add(pinicializarNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AIdentificadorIdentifica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIdentifica pidentificaNode1;
        {
            // Block
        TIdentificador tidentificadorNode2;
        tidentificadorNode2 = (TIdentificador)nodeArrayList1.get(0);

        pidentificaNode1 = new AIdentificadorIdentifica(tidentificadorNode2);
        }
	nodeList.add(pidentificaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AInicializarInicializar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInicializar pinicializarNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList3.get(0);

        pinicializarNode1 = new AInitInicializar(pexpNode2);
        }
	nodeList.add(pinicializarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AProcDeclara */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclara pdeclaraNode1;
        pdeclaraNode1 = (PDeclara)nodeArrayList1.get(0);
	nodeList.add(pdeclaraNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AFuncDeclara */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclara pdeclaraNode1;
        pdeclaraNode1 = (PDeclara)nodeArrayList1.get(0);
	nodeList.add(pdeclaraNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AAdecprocedimentodecprocedimento1DecProcedimento */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclara pdeclaraNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        PComando pcomandoNode3;
        {
            // Block
        }
        pcomandoNode3 = (PComando)nodeArrayList5.get(0);

        pdeclaraNode1 = new ADecProcedimentoDeclara(listNode2, pcomandoNode3);
        }
	nodeList.add(pdeclaraNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AAdecprocedimentodecprocedimento2DecProcedimento */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclara pdeclaraNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        PComando pcomandoNode3;
        {
            // Block
        }
        pcomandoNode3 = (PComando)nodeArrayList6.get(0);

        pdeclaraNode1 = new ADecProcedimentoDeclara(listNode2, pcomandoNode3);
        }
	nodeList.add(pdeclaraNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AAdecprocedimentodecprocedimento3DecProcedimento */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclara pdeclaraNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PComando pcomandoNode4;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList4.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pcomandoNode4 = (PComando)nodeArrayList6.get(0);

        pdeclaraNode1 = new ADecProcedimentoDeclara(listNode3, pcomandoNode4);
        }
	nodeList.add(pdeclaraNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AAdecprocedimentodecprocedimento4DecProcedimento */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclara pdeclaraNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PComando pcomandoNode4;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList5.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pcomandoNode4 = (PComando)nodeArrayList7.get(0);

        pdeclaraNode1 = new ADecProcedimentoDeclara(listNode3, pcomandoNode4);
        }
	nodeList.add(pdeclaraNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AAdecfuncaodecfuncao1DecFuncao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclara pdeclaraNode1;
        {
            // Block
        PTipo ptipoNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PExp pexpNode4;
        ptipoNode2 = (PTipo)nodeArrayList2.get(0);
        {
            // Block
        }
        pexpNode4 = (PExp)nodeArrayList7.get(0);

        pdeclaraNode1 = new ADecFuncaoDeclara(ptipoNode2, listNode3, pexpNode4);
        }
	nodeList.add(pdeclaraNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AAdecfuncaodecfuncao2DecFuncao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclara pdeclaraNode1;
        {
            // Block
        PTipo ptipoNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PExp pexpNode5;
        ptipoNode2 = (PTipo)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList5.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pexpNode5 = (PExp)nodeArrayList8.get(0);

        pdeclaraNode1 = new ADecFuncaoDeclara(ptipoNode2, listNode4, pexpNode5);
        }
	nodeList.add(pdeclaraNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AAdecfuncaodecfuncao3DecFuncao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclara pdeclaraNode1;
        {
            // Block
        PTipo ptipoNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PExp pexpNode4;
        ptipoNode2 = (PTipo)nodeArrayList2.get(0);
        {
            // Block
        }
        pexpNode4 = (PExp)nodeArrayList8.get(0);

        pdeclaraNode1 = new ADecFuncaoDeclara(ptipoNode2, listNode3, pexpNode4);
        }
	nodeList.add(pdeclaraNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AAdecfuncaodecfuncao4DecFuncao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclara pdeclaraNode1;
        {
            // Block
        PTipo ptipoNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PExp pexpNode5;
        ptipoNode2 = (PTipo)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList5.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pexpNode5 = (PExp)nodeArrayList9.get(0);

        pdeclaraNode1 = new ADecFuncaoDeclara(ptipoNode2, listNode4, pexpNode5);
        }
	nodeList.add(pdeclaraNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AParametrosParametros */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PParametro pparametroNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        pparametroNode1 = (PParametro)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(pparametroNode1 != null)
	{
	  listNode3.add(pparametroNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AParametroParametros */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PParametro pparametroNode1;
        pparametroNode1 = (PParametro)nodeArrayList1.get(0);
	if(pparametroNode1 != null)
	{
	  listNode2.add(pparametroNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AParametroParametro */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParametro pparametroNode1;
        {
            // Block
        PTipo ptipoNode2;
        TIdentificador tidentificadorNode3;
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        tidentificadorNode3 = (TIdentificador)nodeArrayList2.get(0);

        pparametroNode1 = new AParametroParametro(ptipoNode2, tidentificadorNode3);
        }
	nodeList.add(pparametroNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AClasseTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        PTipoClasse ptipoclasseNode2;
        ptipoclasseNode2 = (PTipoClasse)nodeArrayList1.get(0);

        ptipoNode1 = new ATipoClasseTipo(ptipoclasseNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce APrimitivoTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        PTipoPrimitivo ptipoprimitivoNode2;
        ptipoprimitivoNode2 = (PTipoPrimitivo)nodeArrayList1.get(0);

        ptipoNode1 = new ATipoPrimtivoTipo(ptipoprimitivoNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce ATipoClasseTipoClasse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoClasse ptipoclasseNode1;
        {
            // Block
        TClIdentificador tclidentificadorNode2;
        tclidentificadorNode2 = (TClIdentificador)nodeArrayList1.get(0);

        ptipoclasseNode1 = new ATipoClasseTipoClasse(tclidentificadorNode2);
        }
	nodeList.add(ptipoclasseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AIntTipoPrimitivo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoPrimitivo ptipoprimitivoNode1;
        {
            // Block
        TInteiro tinteiroNode2;
        tinteiroNode2 = (TInteiro)nodeArrayList1.get(0);

        ptipoprimitivoNode1 = new AIntTipoPrimitivo(tinteiroNode2);
        }
	nodeList.add(ptipoprimitivoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce ABoolTipoPrimitivo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoPrimitivo ptipoprimitivoNode1;
        {
            // Block
        TBool tboolNode2;
        tboolNode2 = (TBool)nodeArrayList1.get(0);

        ptipoprimitivoNode1 = new ABoolTipoPrimitivo(tboolNode2);
        }
	nodeList.add(ptipoprimitivoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce ARealTipoPrimitivo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoPrimitivo ptipoprimitivoNode1;
        {
            // Block
        TReal trealNode2;
        trealNode2 = (TReal)nodeArrayList1.get(0);

        ptipoprimitivoNode1 = new ARealTipoPrimitivo(trealNode2);
        }
	nodeList.add(ptipoprimitivoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AComandoSeComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pexpNode3 = (PExp)nodeArrayList5.get(0);

        pcomandoNode1 = new ASeComando(pexpNode2, pexpNode3);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AComandoEnquantoComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PExp pexpNode2;
        PComando pcomandoNode3;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pcomandoNode3 = (PComando)nodeArrayList5.get(0);

        pcomandoNode1 = new AComandoEnquantoComando(pexpNode2, pcomandoNode3);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AComandoAtribComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList3.get(0);

        pcomandoNode1 = new AComandoAtribComando(pexpNode2);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AAcomandoatributocomando1Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PAtributo patributoNode2;
        patributoNode2 = (PAtributo)nodeArrayList1.get(0);

        pcomandoNode1 = new AAtributoComando(patributoNode2);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AAcomandoatributocomando2Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PAtributo patributoNode2;
        patributoNode2 = (PAtributo)nodeArrayList2.get(0);

        pcomandoNode1 = new AAtributoComando(patributoNode2);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AComandoBlocoComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        pcomandoNode1 = (PComando)nodeArrayList1.get(0);
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AComandosComandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PComando pcomandoNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        pcomandoNode1 = (PComando)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(pcomandoNode1 != null)
	{
	  listNode3.add(pcomandoNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AComandoComandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PComando pcomandoNode1;
        pcomandoNode1 = (PComando)nodeArrayList1.get(0);
	if(pcomandoNode1 != null)
	{
	  listNode2.add(pcomandoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AAblocobloco1Bloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        }

        pcomandoNode1 = new ABlocoComando(listNode2, listNode3);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AAblocobloco2Bloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        }

        pcomandoNode1 = new ABlocoComando(listNode3, listNode4);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AAblocobloco3Bloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pcomandoNode1 = new ABlocoComando(listNode2, listNode4);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce AAblocobloco4Bloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pcomandoNode1 = new ABlocoComando(listNode3, listNode5);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce AComandoExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pexpNode3 = (PExp)nodeArrayList5.get(0);

        pexpNode1 = new ASeExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce AEnquantoExpExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PComando pcomandoNode3;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pcomandoNode3 = (PComando)nodeArrayList5.get(0);

        pexpNode1 = new AEnquantoExpExp(pexpNode2, pcomandoNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce ANegativoExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new ANumNegativoExp(pexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce ASomaExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMaisExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce ASubtracaoExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMenosExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce AMultExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMultExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce ADivExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ADivExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce AModExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AModExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce AComparacaoExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ACompExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce AMenorQueExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMenorExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce AAndExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AAndExp(pexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce AOrExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AOrExp(pexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce ABlocoDelimitExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce ATermoExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce AContCondEntaoParte */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList2.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AEntaoExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce AFimCondSenaoParte */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new ASenaoExp(pexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce ANumeroTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PNumero pnumeroNode2;
        pnumeroNode2 = (PNumero)nodeArrayList1.get(0);

        pexpNode1 = new ANumExp(pnumeroNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce ABooleanoTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PBooleano pbooleanoNode2;
        pbooleanoNode2 = (PBooleano)nodeArrayList1.get(0);

        pexpNode1 = new ANumBoolExp(pbooleanoNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce AIdAtributoTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce AParTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList2.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce AInteiroNumero */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNumero pnumeroNode1;
        {
            // Block
        TNumInteiro tnuminteiroNode2;
        tnuminteiroNode2 = (TNumInteiro)nodeArrayList1.get(0);

        pnumeroNode1 = new AInteiroNumero(tnuminteiroNode2);
        }
	nodeList.add(pnumeroNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new85() /* reduce ARealNumero */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNumero pnumeroNode1;
        {
            // Block
        TNumReal tnumrealNode2;
        tnumrealNode2 = (TNumReal)nodeArrayList1.get(0);

        pnumeroNode1 = new ARealNumero(tnumrealNode2);
        }
	nodeList.add(pnumeroNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new86() /* reduce AVerdadeiroBooleano */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBooleano pbooleanoNode1;
        {
            // Block
        TVerdadeiro tverdadeiroNode2;
        tverdadeiroNode2 = (TVerdadeiro)nodeArrayList1.get(0);

        pbooleanoNode1 = new AVerdadeiroBooleano(tverdadeiroNode2);
        }
	nodeList.add(pbooleanoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new87() /* reduce AFalsoBooleano */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBooleano pbooleanoNode1;
        {
            // Block
        TFalso tfalsoNode2;
        tfalsoNode2 = (TFalso)nodeArrayList1.get(0);

        pbooleanoNode1 = new AFalsoBooleano(tfalsoNode2);
        }
	nodeList.add(pbooleanoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new88() /* reduce AAidatribidatributo1IdAtributo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;

        pexpNode1 = new AIdAtribExp(null);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new89() /* reduce AAidatribidatributo2IdAtributo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PObject pobjectNode2;
        pobjectNode2 = (PObject)nodeArrayList1.get(0);

        pexpNode1 = new AIdAtribExp(pobjectNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new90() /* reduce AAidatributoidatributo1IdAtributo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        PAtributo patributoNode3;
        patributoNode3 = (PAtributo)nodeArrayList1.get(0);

        pexpNode1 = new AIdAtributoExp(null, patributoNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new91() /* reduce AAidatributoidatributo2IdAtributo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PObject pobjectNode2;
        PAtributo patributoNode3;
        pobjectNode2 = (PObject)nodeArrayList1.get(0);
        patributoNode3 = (PAtributo)nodeArrayList2.get(0);

        pexpNode1 = new AIdAtributoExp(pobjectNode2, patributoNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new92() /* reduce AObjectObject */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PObject pobjectNode1;
        {
            // Block
        TIdentificador tidentificadorNode2;
        TPonto tpontoNode3;
        tidentificadorNode2 = (TIdentificador)nodeArrayList1.get(0);
        tpontoNode3 = (TPonto)nodeArrayList2.get(0);

        pobjectNode1 = new AObjectObject(tidentificadorNode2, tpontoNode3);
        }
	nodeList.add(pobjectNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new93() /* reduce AAblocodelimitblocodelimit1BlocoDelimit */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        PExp pexpNode3;
        {
            // Block
        }
        pexpNode3 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new ABlocoDelimitExp(listNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new94() /* reduce AAblocodelimitblocodelimit2BlocoDelimit */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PExp pexpNode4;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pexpNode4 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ABlocoDelimitExp(listNode3, pexpNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new95() /* reduce AAatributoatributo1Atributo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAtributo patributoNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        }

        patributoNode1 = new AAtributoAtributo(listNode2);
        }
	nodeList.add(patributoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new96() /* reduce AAatributoatributo2Atributo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAtributo patributoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        patributoNode1 = new AAtributoAtributo(listNode3);
        }
	nodeList.add(patributoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new97() /* reduce AExpreExpre */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PExp pexpNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        pexpNode1 = (PExp)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(pexpNode1 != null)
	{
	  listNode3.add(pexpNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new98() /* reduce AExpExpre */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	if(pexpNode1 != null)
	{
	  listNode2.add(pexpNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new99() /* reduce ATerminal$Inicializacoes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        listNode1 = (LinkedList)nodeArrayList1.get(0);
	if(listNode1 != null)
	{
	  listNode2.addAll(listNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new100() /* reduce ANonTerminal$Inicializacoes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {0, SHIFT, 1}, },
			{{-1, ERROR, 1}, {40, SHIFT, 8}, },
			{{-1, ERROR, 2}, {41, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 4}, {0, SHIFT, 9}, },
			{{-1, ERROR, 5}, {24, SHIFT, 11}, },
			{{-1, REDUCE, 6}, {23, SHIFT, 12}, },
			{{-1, REDUCE, 3}, {0, SHIFT, 9}, },
			{{-1, ERROR, 8}, {1, SHIFT, 14}, {2, SHIFT, 15}, },
			{{-1, ERROR, 9}, {40, SHIFT, 17}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 12}, {0, SHIFT, 18}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 14}, {40, SHIFT, 20}, },
			{{-1, ERROR, 15}, {3, SHIFT, 21}, {4, SHIFT, 22}, {5, SHIFT, 23}, {6, SHIFT, 24}, {10, SHIFT, 25}, {11, SHIFT, 26}, {14, SHIFT, 27}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 17}, {2, SHIFT, 15}, },
			{{-1, ERROR, 18}, {40, SHIFT, 37}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 22}, {40, SHIFT, 38}, },
			{{-1, ERROR, 23}, {7, SHIFT, 39}, {8, SHIFT, 40}, {9, SHIFT, 41}, {40, SHIFT, 42}, },
			{{-1, ERROR, 24}, {7, SHIFT, 39}, {8, SHIFT, 40}, {9, SHIFT, 41}, },
			{{-1, ERROR, 25}, {11, SHIFT, 47}, },
			{{-1, ERROR, 26}, {39, SHIFT, 48}, },
			{{-1, ERROR, 27}, {7, SHIFT, 39}, {8, SHIFT, 40}, {9, SHIFT, 41}, {40, SHIFT, 42}, },
			{{-1, ERROR, 28}, {3, SHIFT, 50}, {10, SHIFT, 25}, {11, SHIFT, 26}, {14, SHIFT, 27}, },
			{{-1, ERROR, 29}, {3, SHIFT, 52}, },
			{{-1, REDUCE, 14}, {4, SHIFT, 22}, {5, SHIFT, 23}, {6, SHIFT, 24}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 16}, {10, SHIFT, 25}, {11, SHIFT, 26}, {14, SHIFT, 27}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 37}, {1, SHIFT, 14}, },
			{{-1, ERROR, 38}, {39, SHIFT, 55}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 48}, },
			{{-1, ERROR, 43}, {39, SHIFT, 55}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 47}, },
			{{-1, ERROR, 46}, {39, SHIFT, 59}, },
			{{-1, ERROR, 47}, {39, SHIFT, 63}, },
			{{-1, ERROR, 48}, {12, SHIFT, 64}, },
			{{-1, ERROR, 49}, {39, SHIFT, 65}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 51}, {3, SHIFT, 66}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 31}, },
			{{-1, ERROR, 56}, {24, SHIFT, 67}, },
			{{-1, REDUCE, 28}, {25, SHIFT, 68}, },
			{{-1, ERROR, 58}, {24, SHIFT, 69}, },
			{{-1, ERROR, 59}, {26, SHIFT, 70}, },
			{{-1, REDUCE, 99}, },
			{{-1, REDUCE, 30}, {25, SHIFT, 71}, },
			{{-1, ERROR, 62}, {24, SHIFT, 72}, {39, SHIFT, 59}, },
			{{-1, ERROR, 63}, {12, SHIFT, 74}, },
			{{-1, ERROR, 64}, {7, SHIFT, 39}, {8, SHIFT, 40}, {9, SHIFT, 41}, {13, SHIFT, 75}, {40, SHIFT, 42}, },
			{{-1, ERROR, 65}, {12, SHIFT, 79}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 68}, {39, SHIFT, 55}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 70}, {2, SHIFT, 81}, {12, SHIFT, 82}, {15, SHIFT, 83}, {18, SHIFT, 84}, {19, SHIFT, 85}, {20, SHIFT, 86}, {28, SHIFT, 87}, {37, SHIFT, 88}, {38, SHIFT, 89}, {39, SHIFT, 90}, },
			{{-1, ERROR, 71}, {39, SHIFT, 59}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 100}, },
			{{-1, ERROR, 74}, {7, SHIFT, 39}, {8, SHIFT, 40}, {9, SHIFT, 41}, {13, SHIFT, 100}, {40, SHIFT, 42}, },
			{{-1, ERROR, 75}, {2, SHIFT, 102}, {15, SHIFT, 103}, {18, SHIFT, 104}, {39, SHIFT, 105}, },
			{{-1, ERROR, 76}, {13, SHIFT, 110}, },
			{{-1, REDUCE, 44}, {25, SHIFT, 111}, },
			{{-1, ERROR, 78}, {39, SHIFT, 112}, },
			{{-1, ERROR, 79}, {7, SHIFT, 39}, {8, SHIFT, 40}, {9, SHIFT, 41}, {13, SHIFT, 113}, {40, SHIFT, 42}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 81}, {2, SHIFT, 81}, {6, SHIFT, 24}, {12, SHIFT, 82}, {15, SHIFT, 83}, {18, SHIFT, 84}, {19, SHIFT, 85}, {20, SHIFT, 86}, {28, SHIFT, 87}, {37, SHIFT, 88}, {38, SHIFT, 89}, {39, SHIFT, 90}, },
			{{-1, ERROR, 82}, {2, SHIFT, 81}, {12, SHIFT, 82}, {15, SHIFT, 83}, {18, SHIFT, 84}, {19, SHIFT, 85}, {20, SHIFT, 86}, {28, SHIFT, 87}, {37, SHIFT, 88}, {38, SHIFT, 89}, {39, SHIFT, 90}, },
			{{-1, ERROR, 83}, {12, SHIFT, 119}, },
			{{-1, ERROR, 84}, {12, SHIFT, 120}, },
			{{-1, REDUCE, 86}, },
			{{-1, REDUCE, 87}, },
			{{-1, ERROR, 87}, {2, SHIFT, 81}, {12, SHIFT, 82}, {15, SHIFT, 83}, {18, SHIFT, 84}, {19, SHIFT, 85}, {20, SHIFT, 86}, {28, SHIFT, 87}, {37, SHIFT, 88}, {38, SHIFT, 89}, {39, SHIFT, 90}, },
			{{-1, REDUCE, 84}, },
			{{-1, REDUCE, 85}, },
			{{-1, REDUCE, 88}, {12, SHIFT, 122}, {36, SHIFT, 123}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 77}, {21, SHIFT, 124}, {22, SHIFT, 125}, {28, SHIFT, 126}, {29, SHIFT, 127}, {30, SHIFT, 128}, {31, SHIFT, 129}, {32, SHIFT, 130}, {33, SHIFT, 131}, {34, SHIFT, 132}, },
			{{-1, REDUCE, 80}, },
			{{-1, REDUCE, 81}, },
			{{-1, REDUCE, 82}, },
			{{-1, ERROR, 96}, {39, SHIFT, 133}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 90}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 100}, {2, SHIFT, 102}, {15, SHIFT, 103}, {18, SHIFT, 104}, {39, SHIFT, 105}, },
			{{-1, ERROR, 101}, {13, SHIFT, 136}, },
			{{-1, ERROR, 102}, {2, SHIFT, 102}, {3, SHIFT, 137}, {4, SHIFT, 22}, {5, SHIFT, 23}, {6, SHIFT, 24}, {15, SHIFT, 103}, {18, SHIFT, 104}, {39, SHIFT, 105}, },
			{{-1, ERROR, 103}, {12, SHIFT, 142}, },
			{{-1, ERROR, 104}, {12, SHIFT, 143}, },
			{{-1, ERROR, 105}, {12, SHIFT, 122}, {27, SHIFT, 144}, {36, SHIFT, 123}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 57}, },
			{{-1, ERROR, 108}, {39, SHIFT, 145}, },
			{{-1, ERROR, 109}, {24, SHIFT, 147}, },
			{{-1, ERROR, 110}, {2, SHIFT, 102}, {15, SHIFT, 103}, {18, SHIFT, 104}, {39, SHIFT, 105}, },
			{{-1, ERROR, 111}, {7, SHIFT, 39}, {8, SHIFT, 40}, {9, SHIFT, 41}, {40, SHIFT, 42}, },
			{{-1, REDUCE, 45}, },
			{{-1, ERROR, 113}, {2, SHIFT, 150}, },
			{{-1, ERROR, 114}, {13, SHIFT, 151}, },
			{{-1, ERROR, 115}, {2, SHIFT, 81}, {12, SHIFT, 82}, {15, SHIFT, 83}, {18, SHIFT, 84}, {19, SHIFT, 85}, {20, SHIFT, 86}, {28, SHIFT, 87}, {37, SHIFT, 88}, {38, SHIFT, 89}, {39, SHIFT, 90}, },
			{{-1, REDUCE, 23}, {6, SHIFT, 24}, },
			{{-1, ERROR, 117}, {3, SHIFT, 154}, },
			{{-1, ERROR, 118}, {13, SHIFT, 155}, },
			{{-1, ERROR, 119}, {2, SHIFT, 81}, {12, SHIFT, 82}, {15, SHIFT, 83}, {18, SHIFT, 84}, {19, SHIFT, 85}, {20, SHIFT, 86}, {28, SHIFT, 87}, {37, SHIFT, 88}, {38, SHIFT, 89}, {39, SHIFT, 90}, },
			{{-1, ERROR, 120}, {2, SHIFT, 81}, {12, SHIFT, 82}, {15, SHIFT, 83}, {18, SHIFT, 84}, {19, SHIFT, 85}, {20, SHIFT, 86}, {28, SHIFT, 87}, {37, SHIFT, 88}, {38, SHIFT, 89}, {39, SHIFT, 90}, },
			{{-1, REDUCE, 66}, },
			{{-1, ERROR, 122}, {2, SHIFT, 81}, {12, SHIFT, 82}, {13, SHIFT, 158}, {15, SHIFT, 83}, {18, SHIFT, 84}, {19, SHIFT, 85}, {20, SHIFT, 86}, {28, SHIFT, 87}, {37, SHIFT, 88}, {38, SHIFT, 89}, {39, SHIFT, 90}, },
			{{-1, REDUCE, 92}, },
			{{-1, ERROR, 124}, {2, SHIFT, 81}, {12, SHIFT, 82}, {15, SHIFT, 83}, {18, SHIFT, 84}, {19, SHIFT, 85}, {20, SHIFT, 86}, {28, SHIFT, 87}, {37, SHIFT, 88}, {38, SHIFT, 89}, {39, SHIFT, 90}, },
			{{-1, ERROR, 125}, {2, SHIFT, 81}, {12, SHIFT, 82}, {15, SHIFT, 83}, {18, SHIFT, 84}, {19, SHIFT, 85}, {20, SHIFT, 86}, {28, SHIFT, 87}, {37, SHIFT, 88}, {38, SHIFT, 89}, {39, SHIFT, 90}, },
			{{-1, ERROR, 126}, {2, SHIFT, 81}, {12, SHIFT, 82}, {15, SHIFT, 83}, {18, SHIFT, 84}, {19, SHIFT, 85}, {20, SHIFT, 86}, {28, SHIFT, 87}, {37, SHIFT, 88}, {38, SHIFT, 89}, {39, SHIFT, 90}, },
			{{-1, ERROR, 127}, {2, SHIFT, 81}, {12, SHIFT, 82}, {15, SHIFT, 83}, {18, SHIFT, 84}, {19, SHIFT, 85}, {20, SHIFT, 86}, {28, SHIFT, 87}, {37, SHIFT, 88}, {38, SHIFT, 89}, {39, SHIFT, 90}, },
			{{-1, ERROR, 128}, {2, SHIFT, 81}, {12, SHIFT, 82}, {15, SHIFT, 83}, {18, SHIFT, 84}, {19, SHIFT, 85}, {20, SHIFT, 86}, {28, SHIFT, 87}, {37, SHIFT, 88}, {38, SHIFT, 89}, {39, SHIFT, 90}, },
			{{-1, ERROR, 129}, {2, SHIFT, 81}, {12, SHIFT, 82}, {15, SHIFT, 83}, {18, SHIFT, 84}, {19, SHIFT, 85}, {20, SHIFT, 86}, {28, SHIFT, 87}, {37, SHIFT, 88}, {38, SHIFT, 89}, {39, SHIFT, 90}, },
			{{-1, ERROR, 130}, {2, SHIFT, 81}, {12, SHIFT, 82}, {15, SHIFT, 83}, {18, SHIFT, 84}, {19, SHIFT, 85}, {20, SHIFT, 86}, {28, SHIFT, 87}, {37, SHIFT, 88}, {38, SHIFT, 89}, {39, SHIFT, 90}, },
			{{-1, ERROR, 131}, {2, SHIFT, 81}, {12, SHIFT, 82}, {15, SHIFT, 83}, {18, SHIFT, 84}, {19, SHIFT, 85}, {20, SHIFT, 86}, {28, SHIFT, 87}, {37, SHIFT, 88}, {38, SHIFT, 89}, {39, SHIFT, 90}, },
			{{-1, ERROR, 132}, {2, SHIFT, 81}, {12, SHIFT, 82}, {15, SHIFT, 83}, {18, SHIFT, 84}, {19, SHIFT, 85}, {20, SHIFT, 86}, {28, SHIFT, 87}, {37, SHIFT, 88}, {38, SHIFT, 89}, {39, SHIFT, 90}, },
			{{-1, REDUCE, 89}, {12, SHIFT, 122}, },
			{{-1, REDUCE, 91}, },
			{{-1, REDUCE, 36}, },
			{{-1, ERROR, 136}, {2, SHIFT, 102}, {15, SHIFT, 103}, {18, SHIFT, 104}, {39, SHIFT, 105}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 21}, {4, SHIFT, 22}, {5, SHIFT, 23}, {6, SHIFT, 24}, },
			{{-1, ERROR, 139}, {2, SHIFT, 102}, {3, SHIFT, 172}, {15, SHIFT, 103}, {18, SHIFT, 104}, {39, SHIFT, 105}, },
			{{-1, REDUCE, 59}, {2, SHIFT, 102}, {15, SHIFT, 103}, {18, SHIFT, 104}, {39, SHIFT, 105}, },
			{{-1, ERROR, 141}, {3, SHIFT, 175}, },
			{{-1, ERROR, 142}, {2, SHIFT, 81}, {12, SHIFT, 82}, {15, SHIFT, 83}, {18, SHIFT, 84}, {19, SHIFT, 85}, {20, SHIFT, 86}, {28, SHIFT, 87}, {37, SHIFT, 88}, {38, SHIFT, 89}, {39, SHIFT, 90}, },
			{{-1, ERROR, 143}, {2, SHIFT, 81}, {12, SHIFT, 82}, {15, SHIFT, 83}, {18, SHIFT, 84}, {19, SHIFT, 85}, {20, SHIFT, 86}, {28, SHIFT, 87}, {37, SHIFT, 88}, {38, SHIFT, 89}, {39, SHIFT, 90}, },
			{{-1, ERROR, 144}, {2, SHIFT, 81}, {12, SHIFT, 82}, {15, SHIFT, 83}, {18, SHIFT, 84}, {19, SHIFT, 85}, {20, SHIFT, 86}, {28, SHIFT, 87}, {37, SHIFT, 88}, {38, SHIFT, 89}, {39, SHIFT, 90}, },
			{{-1, ERROR, 145}, {12, SHIFT, 122}, },
			{{-1, ERROR, 146}, {24, SHIFT, 179}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 43}, },
			{{-1, ERROR, 150}, {2, SHIFT, 81}, {4, SHIFT, 22}, {5, SHIFT, 23}, {6, SHIFT, 24}, {12, SHIFT, 82}, {15, SHIFT, 83}, {18, SHIFT, 84}, {19, SHIFT, 85}, {20, SHIFT, 86}, {28, SHIFT, 87}, {37, SHIFT, 88}, {38, SHIFT, 89}, {39, SHIFT, 90}, },
			{{-1, ERROR, 151}, {2, SHIFT, 182}, },
			{{-1, ERROR, 152}, {3, SHIFT, 183}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 93}, },
			{{-1, REDUCE, 83}, },
			{{-1, ERROR, 156}, {13, SHIFT, 184}, },
			{{-1, ERROR, 157}, {13, SHIFT, 185}, },
			{{-1, REDUCE, 95}, },
			{{-1, REDUCE, 98}, {25, SHIFT, 186}, },
			{{-1, ERROR, 160}, {13, SHIFT, 187}, },
			{{-1, REDUCE, 74}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 61}, },
			{{-1, ERROR, 173}, {3, SHIFT, 188}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 62}, },
			{{-1, ERROR, 176}, {13, SHIFT, 189}, },
			{{-1, ERROR, 177}, {13, SHIFT, 190}, },
			{{-1, ERROR, 178}, {24, SHIFT, 191}, },
			{{-1, REDUCE, 56}, },
			{{-1, ERROR, 180}, {2, SHIFT, 81}, {12, SHIFT, 82}, {15, SHIFT, 83}, {18, SHIFT, 84}, {19, SHIFT, 85}, {20, SHIFT, 86}, {28, SHIFT, 87}, {37, SHIFT, 88}, {38, SHIFT, 89}, {39, SHIFT, 90}, },
			{{-1, ERROR, 181}, {3, SHIFT, 193}, },
			{{-1, ERROR, 182}, {2, SHIFT, 81}, {4, SHIFT, 22}, {5, SHIFT, 23}, {6, SHIFT, 24}, {12, SHIFT, 82}, {15, SHIFT, 83}, {18, SHIFT, 84}, {19, SHIFT, 85}, {20, SHIFT, 86}, {28, SHIFT, 87}, {37, SHIFT, 88}, {38, SHIFT, 89}, {39, SHIFT, 90}, },
			{{-1, REDUCE, 94}, },
			{{-1, ERROR, 184}, {17, SHIFT, 196}, },
			{{-1, ERROR, 185}, {2, SHIFT, 102}, {15, SHIFT, 103}, {18, SHIFT, 104}, {39, SHIFT, 105}, },
			{{-1, ERROR, 186}, {2, SHIFT, 81}, {12, SHIFT, 82}, {15, SHIFT, 83}, {18, SHIFT, 84}, {19, SHIFT, 85}, {20, SHIFT, 86}, {28, SHIFT, 87}, {37, SHIFT, 88}, {38, SHIFT, 89}, {39, SHIFT, 90}, },
			{{-1, REDUCE, 96}, },
			{{-1, REDUCE, 63}, },
			{{-1, ERROR, 189}, {17, SHIFT, 196}, },
			{{-1, ERROR, 190}, {2, SHIFT, 102}, {15, SHIFT, 103}, {18, SHIFT, 104}, {39, SHIFT, 105}, },
			{{-1, REDUCE, 54}, },
			{{-1, ERROR, 192}, {3, SHIFT, 202}, },
			{{-1, REDUCE, 39}, },
			{{-1, ERROR, 194}, {2, SHIFT, 81}, {12, SHIFT, 82}, {15, SHIFT, 83}, {18, SHIFT, 84}, {19, SHIFT, 85}, {20, SHIFT, 86}, {28, SHIFT, 87}, {37, SHIFT, 88}, {38, SHIFT, 89}, {39, SHIFT, 90}, },
			{{-1, ERROR, 195}, {3, SHIFT, 204}, },
			{{-1, ERROR, 196}, {2, SHIFT, 81}, {12, SHIFT, 82}, {15, SHIFT, 83}, {18, SHIFT, 84}, {19, SHIFT, 85}, {20, SHIFT, 86}, {28, SHIFT, 87}, {37, SHIFT, 88}, {38, SHIFT, 89}, {39, SHIFT, 90}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 97}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 41}, },
			{{-1, ERROR, 203}, {3, SHIFT, 206}, },
			{{-1, REDUCE, 40}, },
			{{-1, ERROR, 205}, {16, SHIFT, 207}, },
			{{-1, REDUCE, 42}, },
			{{-1, ERROR, 207}, {2, SHIFT, 81}, {12, SHIFT, 82}, {15, SHIFT, 83}, {18, SHIFT, 84}, {19, SHIFT, 85}, {20, SHIFT, 86}, {28, SHIFT, 87}, {37, SHIFT, 88}, {38, SHIFT, 89}, {39, SHIFT, 90}, },
			{{-1, REDUCE, 78}, },
			{{-1, REDUCE, 79}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 3}, {4, 10}, {7, 13}, },
			{{-1, 4}, },
			{{-1, 5}, {12, 19}, },
			{{-1, 6}, },
			{{-1, 16}, },
			{{-1, 7}, },
			{{-1, 28}, {30, 53}, },
			{{-1, 29}, {28, 51}, {34, 54}, },
			{{-1, 138}, {15, 30}, {30, 30}, },
			{{-1, 139}, {138, 171}, {150, 180}, {182, 194}, },
			{{-1, 115}, {116, 153}, },
			{{-1, 31}, },
			{{-1, 32}, },
			{{-1, 33}, {81, 116}, {116, 116}, },
			{{-1, 56}, {43, 58}, {68, 80}, },
			{{-1, 60}, {62, 73}, {71, 99}, },
			{{-1, 57}, },
			{{-1, 61}, },
			{{-1, 34}, },
			{{-1, 35}, },
			{{-1, 36}, },
			{{-1, 76}, {74, 101}, {79, 114}, {111, 149}, },
			{{-1, 77}, },
			{{-1, 78}, {23, 43}, {27, 49}, },
			{{-1, 44}, },
			{{-1, 45}, {24, 46}, },
			{{-1, 140}, {75, 106}, {100, 135}, {110, 148}, {136, 170}, {185, 198}, {190, 201}, },
			{{-1, 141}, {139, 173}, {140, 174}, },
			{{-1, 107}, },
			{{-1, 159}, {70, 91}, {81, 117}, {82, 118}, {87, 121}, {115, 152}, {119, 156}, {120, 157}, {124, 161}, {125, 162}, {126, 163}, {127, 164}, {128, 165}, {129, 166}, {130, 167}, {131, 168}, {132, 169}, {142, 176}, {143, 177}, {144, 178}, {150, 181}, {180, 192}, {182, 195}, {194, 203}, {196, 205}, {207, 209}, },
			{{-1, 197}, {189, 200}, },
			{{-1, 208}, },
			{{-1, 92}, },
			{{-1, 93}, },
			{{-1, 94}, },
			{{-1, 95}, },
			{{-1, 96}, {75, 108}, {100, 108}, {102, 108}, {110, 108}, {136, 108}, {139, 108}, {140, 108}, {185, 108}, {190, 108}, },
			{{-1, 97}, },
			{{-1, 98}, {75, 109}, {96, 134}, {100, 109}, {102, 109}, {108, 146}, {110, 109}, {136, 109}, {139, 109}, {140, 109}, {185, 109}, {190, 109}, },
			{{-1, 160}, {186, 199}, },
			{{-1, 62}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'classe'",
			"expecting: cl identificador",
			"expecting: EOF",
			"expecting: ';'",
			"expecting: '&', ';'",
			"expecting: 'classe', EOF",
			"expecting: 'filha da classe', 'começa'",
			"expecting: 'termina', 'objeto', 'var', 'cons', '=>', 'procedimento', 'função'",
			"expecting: 'começa'",
			"expecting: 'int', 'bool', 'real', cl identificador",
			"expecting: 'int', 'bool', 'real'",
			"expecting: 'procedimento'",
			"expecting: identificador",
			"expecting: 'termina', '=>', 'procedimento', 'função'",
			"expecting: 'termina'",
			"expecting: 'começa', 'termina', 'objeto', 'var', 'cons', '=>', 'procedimento', '(', 'função', 'se', 'enquanto', 'true', 'false', '-', num inteiro, num real, identificador",
			"expecting: 'filha da classe'",
			"expecting: '('",
			"expecting: ';', ','",
			"expecting: ':='",
			"expecting: ';', identificador",
			"expecting: ';', ',', identificador",
			"expecting: 'int', 'bool', 'real', ')', cl identificador",
			"expecting: 'começa', '(', 'se', 'enquanto', 'true', 'false', '-', num inteiro, num real, identificador",
			"expecting: 'começa', 'se', 'enquanto', identificador",
			"expecting: ')'",
			"expecting: ')', ','",
			"expecting: 'começa', 'cons', '(', 'se', 'enquanto', 'true', 'false', '-', num inteiro, num real, identificador",
			"expecting: 'começa', 'termina', '=>', 'procedimento', ')', 'função', 'se', 'senão', 'enquanto', 'e', 'ou', ';', ',', '-', '+', '*', '/', '%', '==', '<', identificador",
			"expecting: 'começa', 'termina', '=>', 'procedimento', '(', ')', 'função', 'se', 'senão', 'enquanto', 'e', 'ou', ';', ',', '-', '+', '*', '/', '%', '==', '<', '.', identificador",
			"expecting: 'começa', 'termina', '=>', 'procedimento', ')', 'função', 'se', 'senão', 'enquanto', ';', ',', identificador",
			"expecting: 'começa', 'termina', 'objeto', 'var', 'cons', 'se', 'enquanto', identificador",
			"expecting: '(', '=', '.'",
			"expecting: 'começa', '(', ')', 'se', 'enquanto', 'true', 'false', '-', num inteiro, num real, identificador",
			"expecting: 'começa', 'termina', '=>', 'procedimento', '(', ')', 'função', 'se', 'senão', 'enquanto', 'e', 'ou', ';', ',', '-', '+', '*', '/', '%', '==', '<', identificador",
			"expecting: 'começa', 'termina', 'objeto', 'var', 'cons', '(', 'se', 'enquanto', 'true', 'false', '-', num inteiro, num real, identificador",
			"expecting: 'começa', 'termina', 'se', 'enquanto', identificador",
			"expecting: 'começa', 'objeto', 'var', 'cons', '(', 'se', 'enquanto', 'true', 'false', '-', num inteiro, num real, identificador",
			"expecting: 'começa', 'termina', '(', 'se', 'enquanto', 'true', 'false', '-', num inteiro, num real, identificador",
			"expecting: 'então'",
			"expecting: 'senão'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 2, 0, 3, 4, 5, 6, 1, 2, 0, 0, 2, 1, 7, 4, 8, 1, 3, 4, 5, 1, 9, 10, 11, 12, 9, 13, 14, 7, 15, 15, 15, 13, 13, 13, 16, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 17, 12, 5, 14, 5, 13, 14, 18, 3, 18, 3, 19, 20, 21, 20, 17, 22, 17, 5, 15, 12, 15, 23, 12, 15, 20, 22, 24, 25, 26, 12, 22, 3, 27, 23, 17, 17, 28, 28, 23, 28, 28, 29, 21, 28, 28, 28, 28, 12, 30, 28, 20, 24, 25, 31, 17, 17, 32, 13, 30, 12, 3, 24, 9, 26, 8, 25, 23, 27, 14, 25, 23, 23, 30, 33, 12, 23, 23, 23, 23, 23, 23, 23, 23, 23, 34, 28, 13, 24, 30, 35, 36, 36, 14, 23, 23, 23, 17, 3, 30, 13, 25, 37, 8, 14, 23, 30, 28, 25, 25, 28, 26, 25, 30, 30, 30, 30, 30, 30, 30, 30, 30, 13, 38, 30, 14, 14, 30, 25, 25, 3, 30, 23, 14, 37, 30, 39, 24, 23, 28, 30, 39, 24, 30, 14, 13, 23, 14, 23, 30, 30, 25, 30, 30, 13, 14, 13, 40, 13, 23, 30, 30, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
